//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     //
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GetCitiesForCountry
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.3.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.webserviceX.NET", ConfigurationName="GetCitiesForCountry.GlobalWeatherSoap")]
    public interface GlobalWeatherSoap
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.webserviceX.NET/GetWeather", ReplyAction="*")]
        System.Threading.Tasks.Task<GetCitiesForCountry.GetWeatherResponse> GetWeatherAsync(GetCitiesForCountry.GetWeatherRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.webserviceX.NET/GetCitiesByCountry", ReplyAction="*")]
        System.Threading.Tasks.Task<GetCitiesForCountry.GetCitiesByCountryResponse> GetCitiesByCountryAsync(GetCitiesForCountry.GetCitiesByCountryRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.3.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetWeatherRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="GetWeather", Namespace="http://www.webserviceX.NET", Order=0)]
        public GetCitiesForCountry.GetWeatherRequestBody Body;
        
        public GetWeatherRequest()
        {
        }
        
        public GetWeatherRequest(GetCitiesForCountry.GetWeatherRequestBody Body)
        {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.3.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://www.webserviceX.NET")]
    public partial class GetWeatherRequestBody
    {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string CityName;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=1)]
        public string CountryName;
        
        public GetWeatherRequestBody()
        {
        }
        
        public GetWeatherRequestBody(string CityName, string CountryName)
        {
            this.CityName = CityName;
            this.CountryName = CountryName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.3.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetWeatherResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="GetWeatherResponse", Namespace="http://www.webserviceX.NET", Order=0)]
        public GetCitiesForCountry.GetWeatherResponseBody Body;
        
        public GetWeatherResponse()
        {
        }
        
        public GetWeatherResponse(GetCitiesForCountry.GetWeatherResponseBody Body)
        {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.3.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://www.webserviceX.NET")]
    public partial class GetWeatherResponseBody
    {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string GetWeatherResult;
        
        public GetWeatherResponseBody()
        {
        }
        
        public GetWeatherResponseBody(string GetWeatherResult)
        {
            this.GetWeatherResult = GetWeatherResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.3.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetCitiesByCountryRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="GetCitiesByCountry", Namespace="http://www.webserviceX.NET", Order=0)]
        public GetCitiesForCountry.GetCitiesByCountryRequestBody Body;
        
        public GetCitiesByCountryRequest()
        {
        }
        
        public GetCitiesByCountryRequest(GetCitiesForCountry.GetCitiesByCountryRequestBody Body)
        {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.3.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://www.webserviceX.NET")]
    public partial class GetCitiesByCountryRequestBody
    {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string CountryName;
        
        public GetCitiesByCountryRequestBody()
        {
        }
        
        public GetCitiesByCountryRequestBody(string CountryName)
        {
            this.CountryName = CountryName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.3.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetCitiesByCountryResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="GetCitiesByCountryResponse", Namespace="http://www.webserviceX.NET", Order=0)]
        public GetCitiesForCountry.GetCitiesByCountryResponseBody Body;
        
        public GetCitiesByCountryResponse()
        {
        }
        
        public GetCitiesByCountryResponse(GetCitiesForCountry.GetCitiesByCountryResponseBody Body)
        {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.3.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://www.webserviceX.NET")]
    public partial class GetCitiesByCountryResponseBody
    {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string GetCitiesByCountryResult;
        
        public GetCitiesByCountryResponseBody()
        {
        }
        
        public GetCitiesByCountryResponseBody(string GetCitiesByCountryResult)
        {
            this.GetCitiesByCountryResult = GetCitiesByCountryResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.3.0.0")]
    public interface GlobalWeatherSoapChannel : GetCitiesForCountry.GlobalWeatherSoap, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.3.0.0")]
    public partial class GlobalWeatherSoapClient : System.ServiceModel.ClientBase<GetCitiesForCountry.GlobalWeatherSoap>, GetCitiesForCountry.GlobalWeatherSoap
    {
        
    /// <summary>
    /// Implement this partial method to configure the service endpoint.
    /// </summary>
    /// <param name="serviceEndpoint">The endpoint to configure</param>
    /// <param name="clientCredentials">The client credentials</param>
    static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public GlobalWeatherSoapClient(EndpointConfiguration endpointConfiguration) : 
                base(GlobalWeatherSoapClient.GetBindingForEndpoint(endpointConfiguration), GlobalWeatherSoapClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public GlobalWeatherSoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(GlobalWeatherSoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public GlobalWeatherSoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(GlobalWeatherSoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public GlobalWeatherSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<GetCitiesForCountry.GetWeatherResponse> GetWeatherAsync(GetCitiesForCountry.GetWeatherRequest request)
        {
            return base.Channel.GetWeatherAsync(request);
        }
        
        public System.Threading.Tasks.Task<GetCitiesForCountry.GetCitiesByCountryResponse> GetCitiesByCountryAsync(GetCitiesForCountry.GetCitiesByCountryRequest request)
        {
            return base.Channel.GetCitiesByCountryAsync(request);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.GlobalWeatherSoap))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.GlobalWeatherSoap12))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpTransportBindingElement httpBindingElement = new System.ServiceModel.Channels.HttpTransportBindingElement();
                httpBindingElement.AllowCookies = true;
                httpBindingElement.MaxBufferSize = int.MaxValue;
                httpBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.GlobalWeatherSoap))
            {
                return new System.ServiceModel.EndpointAddress("http://www.webservicex.net/globalweather.asmx");
            }
            if ((endpointConfiguration == EndpointConfiguration.GlobalWeatherSoap12))
            {
                return new System.ServiceModel.EndpointAddress("http://www.webservicex.net/globalweather.asmx");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            GlobalWeatherSoap,
            
            GlobalWeatherSoap12,
        }
    }
}
